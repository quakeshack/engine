# The Quake Shack

## Roadmap

* [_] Porting over the remaining stuff from QuakeC to QuakeJS
* [_] A proper polish of QuakeJS stuff, cleaning redundant code, fixing some structural shortcomings
* [_] Fix up the current netcode, implement proper client-side predicition and movement
* [_] Spin off game code into its own repositories and structure (for easier mod making)
* [_] Remove QuakeC VM from the engine and make it a QuakeJS mod allowing to load a progs.dat
* [_] Client game code stuff, allowing mods to handle client stuff (tents, sbar, etc.)

## Todos

Grouped by sections and then sorted by priority (more or less).

### Bugs I introduced

* [X] show chatlog also in coop mode
* [X] when one player dies in coop mode, all clients will reconnect and telefrag each other upon spawning
* [X] DS: show the name of the person’s chat message in console message
* [X] CL/SV: name change on local game makes the message emit twice
* [X] S: sometimes there’s still sound playing after the game has shutdown
* [X] S: make sure all remaining to be lazily loaded sound files are load after the game started
* [X] R: somewhere dynamic lights are not properly cast
* [X] Host: Load Game and Save Game is now completely broken
  * [_] QuakeC: fix issues with use-after-free situations
  * [X] QuakeJS: add serializers to everything
* [X] S/SV/QuakeJS: sounds go crazy, causing insane amount of stress
* [X] Recheck all ref/copy of `(origin|a?velocity|angles)\s*=`
* [X] ED: parsing strings from entities text does not unescape strings properly
* [X] QuakeJS: func_*gate is misbehaving (not getting removed)
* [_] QuakeJS/SV: spawning new objects on demand outside the world should unstuck somewhere inside of the world again (trace first)
* [X] QuakeJS: monsters are 8 units below the floor

### QuakeC / QuakeJS

* [X] prepare structure for JS client/server progs
* [X] PR/PF: replace all those `v_int`/`v_float` access through a proxy to improve readability
* [X] replace all `globals_(float|int)\[([0-9]+)\]` with proper constants use
* [X] PR/ED: implement missing `PR.etype.ev_field` handling to the EdictProxy
* [X] PR/ED: parse `progdefs.h` (generated by qcc) to maintain a list of shared variables
* [X] ED: abstract setting fields (needs to be done through EdictProxy)
* [X] SV+PR: get rid of self, other, etc. use a struct instead FunctionProxy knows how to use
* [X] PF: add all arguments to each builtin (EngineInterface) and provide wrappers for the QuakeC VM
* [X] add ability to spawn entities after the server being ready via API
* [X] reimplement `ED.Print`
* [X] reimplement `Host.Give_f`
* [X] implement a better state machine with scheduler
* [_] reimplement the Quake game in QuakeJS
  * [X] player
    * [_] Finale screens
  * [X] air_bubbles
  * [X] func_door_secret
  * [X] func_plat
  * [X] func_train
  * [X] info_player_start2
  * [X] misc_teleporttrain
  * [X] monster_army
  * [X] monster_demon1
  * [X] monster_dog
  * [X] monster_hell_knight
  * [X] monster_knight
  * [X] monster_ogre
  * [_] monster_oldone
  * [X] monster_shalrath
  * [X] monster_shambler
  * [_] monster_tarbaby
  * [_] monster_wizard
  * [_] monster_boss
    * [_] event_lightning
  * [X] monster_enforcer
  * [_] monster_fish
  * [X] monster_zombie
  * [X] path_corner
  * [X] trap_shooter
    * [X] spawnflag: laser
  * [X] trap_spikeshooter
  * [X] trigger_changelevel
  * [X] trigger_hurt
  * [X] trigger_monsterjump
  * [X] trigger_push
* [X] rename `edict.api` to `edict.entity`
* [_] put some things behind feature gates, so that the game can tell the engine what things are needed/supported
* [_] improve stack trace / error handling for QuakeC
* [_] build something that will take a map from defs and makes sure that some properties must be within that range (for movetype, solid, flags)
* [_] applyBackpack: currentammo not updated
* [_] cvars: move game related cvars to PR and QuakeJS game
* [_] BaseEntity: make state definitions static

### Modern JavaScript

* [_] `COM` we need to completely get rid of synchroneously loading files, it’s flagged as deprecated
* [_] use more Exceptions and better Exception classes, also more console.asserts
* [_] look into worker and multithreading
* [_] look into bun.sh
* [X] completely switch to JS modules at some point
* [_] use more generator functions when possible

#### Event Bus Todo List

* [X] SV and Host: listening to cvar changes
* [X] Draw: listen to filesystem being/end disc

### Code smell

* [_] SV: cleanup the `SV.WriteEntitiesToClient` mess a bit, make it more flexible
* [_] ED: cleanup `charCodeAt`
* [X] `Host.Savegame_f` and `ED` are having duplicate code (parsing entities)
* [X] there’s no proper clean up for Sound, sometimes sound gets stuck playing after Quit
* [_] completely get rid of `Host.client`
* [_] refactor that mess in `Mod`, split into loading and rendering parts
* [_] refactor `MSG`/`SZ` especially in regards to `NET.message` and `client[…].message`
* [_] refactor global `SV` states into proper modules
* [X] rewrite `Vec` based on top of `Array`
* [X] use more await/async when necessary, introduce a shutting down flag to break async processing
* [X] replace all `>> 1` with `* 2` etc.
* [X] SV: introduce `Edict` class, the current loose object already got `clear` and `equals` to it
* [_] SV: introduce `Client` class, the current loose object already got a few methods in it
* [X] index.html: reorganize shaders
* [_] `CL.state.intermission`/`ExitIntermission`: unsure what happens next on DS
* [X] Sys: remove onunload hook, it’s deprecated
* [X] add a `distanceTo()` to `Vec` for an optimized distance calculation (instead of doing `x.copy().subtract(y).len()`)
* [X] GL/Mod: clear up duplicate code regarding resampling textures (upscaling to the nearest power of two)
* [X] GL/Mod: clear up duplicate code regarding 8-to-24 bit conversion

### Network improvements

* [_] port QuakeWorld netcode
* [_] flush messages more often, increase update rate
* [_] only send message when actually needed, there’s too much idle chatter right now
* [_] look into that weird sluggish feel when ping is >100 ms (especially on Firefox)
* [X] introduce a required server/client version level and drop clients with wrong version
* [X] automatically connect to /api/ instead of /
* [_] ability to specify listen address/interface

### SVC improvements

* [X] refactor chatting from `svc.print` to `svc.chatmsg`

### Random improvements

* [X] IN: touch support (smart phones)
* [X] Cvar: turn Cvars into proper self-registering classes, add quality of life things like events and more flags (read-only, cheats etc.)
* [_] UI: textboxes should act more like text boxes
* [X] UI: show connecting/loading state in a small UI box with progressbar
* [X] S: measure async load time for sounds, do not play them when it’s too late anyway
* [X] fix handling of gl_modes (mipmap vs no mipmap)
* [_] finished demos trigger a `Host.Error` (lost connection), needs fixing
* [_] M: introduce a password required dialog to join password protected servers
* [X] S: still some issues with stopping sound upon a crash (mainly Firefox affected)
* [X] Sbar: Show recent chatter next to the ranking board
* [_] M: touch support (how to escape etc)
* [X] COM: instead of requesting files by using partial content requests to the webserver, let’s use files instead, leveraging CDNs
  * [X] DS: make it respond to file requests, map it to PAKs, also set Cache-Control headers properly
  * [X] COM: frontend part should simply ask for the file directly (e.g. `/data/pak0.pak/progs.dat`)
* [X] Cvar, IN, COM: write archive variables to localStorage immediately
* [X] SV, CL: we can ramp up the resolution of things like angles etc.
* [_] Mod: lazy load models
* [_] SV: spawn server should wait for async resources to arrive
* [_] SV: reimplement recursive hull check iteratively
* [_] IN: proper virtual joystick and keyboard/UI
* [X] Key: fix empty say spamming

### Rendering improvements

* [_] improve lighting and materials https://chatgpt.com/share/677d90a2-f364-800d-b077-9a93c9343b54
* [_] frame interpolation based on the PR state machine
* [X] rewrite everything to use GL.Upload32 etc., index to RGBA is done on a pic/texture loading level now
* [_] use precalculated mipmaps (e.g. from WAD3), when uploading textures

### Build pipeline

* [_] install dependencies, copy over required stuff to libs (like nipple) and deploy
* [_] flush CDN cache

## Ideas

### ClientGameAPI

* getting rid of `Def.it` and `Def.stat`
* move Sbar code to the client code
* move M code to the client code
  * expose some responsibilities through the API (save/load game)
* move parts of V to the client code
  * V.CalcBlend
  * V.ParseDamage
  * cshift clusterfun
* R: ask the client code regarding certain things
  * view model (or delegate the whole rendering down to the client?)
* CL: everything tents related (CL.ParseTEnt)
* CL: CL.state.stats, CL.state.scores etc.
* CL: delegate a few duties from ParseServerMessage to the client code
* CL: CL.ParseClientdata
* Particles and beams duties
  * handle different types and prepare what to be rendered

### Better frontend/backend separation

* I’m unhappy about the whole `Mod.js` and `R.js` clusterfun, it’s too intermingled, I already had to introduce hacks to get the dedicated server running without any frontend
* Split up Mod into BaseModel, AliasModel, BrushModel, SpriteModel as well as their matching renderer counterparts

### JavaScript instead of QuakeC

* introduce client game code as JavaScript modules --> needs specs
* introduce server game code as JavaScript modules --> in progress
* but keep backward compatibility and have interfaces available --> in progress
* would allow to write easier and better custom mods
* there are a few AST modules, using an AST would allow transpiling QC to JS --> not going to happen

#### QuakeC VM proxy and its mess

* Added `PR.EntityProxy` to proxy entities from edicts (`PR.etype.ev_entity`): stubbish,
* Added `PR.EdictProxy` to proxy edicts, accessing strings, floats, vectors, functions
* There is `SV.server.gameAPI` to map `globaldefs`
* There is `SV.server.edicts[].api` to map `fielddefs`
* There are too many variables floating around in `progs.dat`, need to parse `progsdef.h` in order to maintain a more strict list --> done
* Need to restructure things better:
  * there should be a `Progs` class/interface, this is then managing all access and how things are accessed
  * `GameInterface` --> will provide all functions and variables for global things (in PR land: `new EdictProxy(null)`)
  * `EdictInterface` --> will provide all functions and variables for edict/entity things (in PR land: `new EdictProxy(ent)`)
  * `EngineInterface` --> will basically provide `PF.builtin` in a meaningful way (in PR land: that PF mess)
* `PR.NewString` and `PR.TempString`: NewString is leaky, need to think of a better solution --> done
* `PF` needs to be refactored, lots of references to things like `self`, `other`, `goalentity`
  * some of the methods can be put to `Vector` as well
* `PR` needs to sit on top of `EngineInterface`:
  * QuakeC will still communicate a lot over global variables (e.g. `trace` data)
  * JavaScript game will communicate in a more modern way
* clusterfun ahead:
  * I need to decouple all PF/PR into its own isolated object
  * server needs to be decoupled as well and pass it down to the game API engine
  * ~game API engine interface needs a clear interface (see progdefs.h)~ --> not necessary anymore
  * also spawning an entity needs the classname (here we need a crutch for QuakeC, because it doesn’t have that concept of instantiating classes first, it’s a bit loosy goosy)
* entity fields that the engine definitely needs
  * origin
  * oldorigin
  * velocity
  * avelocity
  * fixangle
  * frame, modelindex
  * view_ofs
  * colormap
  * skin
  * effects
  * dmg_save, dmg_take, dmg_inflictor
  * idealpitch
  * items, items2
  * weaponframe
  * health
  * currentammo
  * ammo_shells

### More multiplayer features

* have some sort of user registration/tracking
* collect K/D ratios, accuracy etc.
* upload avatars for users
* have multiple servers deployed across regions, connect to the closest ones
* coop lobbies (will only work once the `SV`/`Host`/`Net` global state clusterfuck is cleaned up)
* sv_timelimit, sv_maplist
* idle kick
* ask player to set a username when they have their default name
* increase limit to 32 players (like QW)
* pausable --> already exists, but needs improvement

### Menu rework

* each page has the same set of elements
 * header
 * logo on the left (optional)
 * large items, small items
 * cursors
 * sliders, textboxes and buttons
* some menu things suck though (main menu is one big picture)

```
class MainMenu extends BaseMenu {
  constructor() {
    this._largeCursor = true;
    this._items = [
      new MenuButton()
    ]
  }
};
```

### Random thoughts, ideas, etc.

* more streaming of data, make textures only available when needed
* voice chat? (not WebRTC based)
* improve client side of things
  * improve readability of UI, but stick to the Quake charme
  * also rework the UI system to someone better maintainable
  * more flexible statusbar system
  * have an event based system for bonus flashes, damages etc.
* look into GoldSrc’s StudioModel or some other format, just as a coding challenge
* look into colored lights
  * dynamic lights can already have color
  * static lights are still grayscale
* make it Quake2 compatible?
  * not that trivial, since Quake2 game code is ia32/native
  * we could port over features though
* look into loading of Classic Doom assets, to make a game mash-up of sorts
* look into things like https://github.com/schteppe/cannon.js and https://github.com/kripken/ammo.js
* play around with skybox support etc.
* integrate some debugging tools like a texture and pic browser --> done
* integrate a model viewer tool
* There are a couple of things QuakeWorld improved and introduced, I should take a look at them and decide what’s good and what’s bad.
* rewrite qbsp, vis, light etc. in TypeScript and use https://github.com/gpujs/gpu.js
* implement aas from Quake 3 to enable better pathfinding for our Quake 1 AI

## Resources

* https://quake.fandom.com/wiki/Console_Commands_(Q1)
* https://quakewiki.org/wiki/Quake_BSP_Format
  * some insights on the evolution of BSP formats
* https://www.gamers.org/dEngine/quake/spec/quake-spec34/qkspec_4.htm
  * mentions the formula on how to calculate light levels
* https://github.com/gpujs/gpu.js
  * library to offload calculations to the GPU
* https://github.com/id-Software/Quake-Tools/tree/master/qutils
  * Official Quake Utils
* https://idtech.space/
  * https://code.idtech.space/ all id tech related code (without leaks)
* stuff for building maps
  * https://github.com/ericwa/ericw-tools – compile maps with q3map2 features
  * https://developer.valvesoftware.com/wiki/MAP_(file_format) – we are using Valve 220
  * https://netradiant.gitlab.io/ – pretty good fork of GtkRadiant

## Log

### 2025-07-29

* moved crosshair duties from V to SCR
* started making use of game capabilities to switch between some legacy code and new code
* introduced the expedited datagram to write messages before the big entity delta update run
* started making use of dispatching and handling client events
* next up: work on transmitting stats/inventory to the client using events

### 2025-07-28

* started adding server messages to streamline server to client events
  * these will be handled by the client code
  * however, it’s not done yet, I want to differentiate by expedited (sent out before entities get written), normal and reliable (to be sent on the reliable channel)
* added identifiers and checks for the current active game

### 2025-07-27

* restructured the repos
* fixed a rendering glitch I introduced
* added build stuff

### 2025-07-25

* again hunting down the living dead (stupid racy scheduled thinks issue)
* more client stuff:
  * trying to break apart more client code
  * played around with some effects here and there
* definitely getting an idea how I want to have the client API later

### 2025-07-24

* more client stuff:
  * static entities are now client-side entities with their own logic
  * wired up pmove on the client side, but it’s still janky af
  * time to rewrite parsing and prediction of entities

### 2025-07-23

* reorganized the whole client entity structure
  * client entities can have handlers as well, providing `spawn`, `emit` and `think`
  * I’m not happy about the naming convention yet, but things work as I like
  * would be nice if I could merge those client and server entities into one class, but have different methods
* `ServerEdict.makeStatic` needs compression for class names now, it’s ballooning the signon buffer

### 2025-07-22

* I should be more careful with things per frame, always to deep-copy hulls on each frame completely made the FPS crumble
* had to redo some work over at the QuakeVM, because since I deglobalized lots of objects, I had to find another way how to inject private objects
* emitting temporary entities again
* breaking up CL into components, making code better maintainable

### 2025-07-21

* started restructuring the messy client code, here are the parts I identified
  * demos
  * input
  * parsing messages
  * static and temporary entities
  * prediction code
  * state handling

### 2025-07-20

* restructured texture handling
* played around with warp pixel shader
* cleaned up the Defs more
* fixed a bug regarding loading a game (AI having no valid goal)
* worked on `ClientGameAPI`, reorganized `Draw`

### 2025-07-19

* started unentangling components
* improved error handling (no more Sys.Error)
* there’s a bug in playing back demos, sometimes it won’t clear the client state after having finished
  * seems to be more convoluted with the way the client state is handled
* replaced frame interval with an async main loop, makes it easier to handle fatal errors
* fixed a bug regarding transparency in the Wad3 texture loader
* added a toolbox class to explore wad files
* started working on `ClientGameAPI`

### 2025-07-15

* got the dedicated server spawn a map again, but got only that far, more cleaning and wiring up required
* decided to go the lazy (and no longer immutable) route regarding registry, but it should also have no more lookup performance penalty
* moved everything from js to mjs, still lots of work to do, so much legacy code I want to get rid of
* fixed a logic flaw in `QuakeEntityAI._huntTarget` which caused unkillable ghosts hunting you down

### 2025-07-14

* tightened jsconfig and eslint config a bit to enforce a stricter standard, it already detected some silent bugs
* game code is now properly sharing stuff with the engine
* reorganized a bit the engine<->game API naming convention

### 2025-07-12

* I asked Claude Sonnet 4 to improve the Key input mess (especially when using a non-us keyboard layout)
* I started to refactor the engine code:
  * completely moving to ESM
  * throwing out unused code
  * breaking larger files into smaller better managable ones
  * introduced a registry to hold references to singletons (workaround to avoid circular dependencies)
* next steps I’m planning on the engine side:
  * decouple tightly decoupled components
  * implement an eventbus that can be accessed by the regular code and worker
  * reduce reliance on the registry to an absolute minimum
  * make stuff async as much as possible
    * uploading textures and building VBA in workers

### 2025-07-09

* continued cleaning up loading textures stuff, paved the way to load any modern image as texture
* if there’s `gfx/conback.webp`, it will use that as conback
* it’s time to completely rewrite CL.js, it’s a huge mess based on the old JS port, some modern stuff I introduced and some stuff I played around with

### 2025-07-06

* worked more on client-side prediction stuff (unfinished yet)
* reorganized loading WAD files
* added WAD3 support
* started working on uploading 32 bit textures instead of 8 bit indexed stuff

### 2025-06-30

* reorganized Vector a bit, some sort of belated spring cleaning
* fixed a bug regarding spawnflags and skill level 3
* Defs.mjs is now all ReadOnly

### 2025-06-25

* added monster_shambler
* a couple of changes

### 2025-06-22

* I need to double check the AI/NPC logic, the knights are glitching around when attacking
  * fixed it, `ServerEdict.walkMove` didn’t convert degrees into radians lol
* fixed NPC enemy sight check bug
* implemented `BaseMonster.moveTargetReached` properly
* some code cleanup
* found some bugs (set v_angle to angles) I definitely introduced while not focused

### 2025-06-21

* fixed the lerp stuff
* changed NPC names to their proper names (QuakeC: client.qc/ClientObituary)
* added monster_ogre
* fixed AI logic to switch from target to enemy when received damage
* removed some hardcoded magic values (color codes)
* added monster_shalrath
* fixed/changed some logic regarding stepping forward in the state machine
* added laser traps
* added monster_enforcer
* added refire check logic (unsure if it actually works lol)

### 2025-06-20

* fixed rcon command
* small knight fix
* added monster_hell_knight
* small AI improvements

### 2025-06-19

* fixed a few AI related bugs and added more logic
* fixed monster_zombie, added giblets
* fixed monster_demon1
* added monster_knight and parts of monster_hell_knight

### 2025-05-08

* added monster_demon1
* added misc_gib_meatspray
* added `canReceiveDamage` to `BaseEntity`
* tried VS Code’s Agentic AI to port some logic, it went just so-so
  * it forgot to port important parts of the original logic
  * it assumed some APIs wrongly

### 2025-04-28

* need to rethink the AI code structure a bit, I ran into a few problems such as:
  * able to do a missile attack is also used to indicate being a hitscanner

### 2025-04-26

* added monster_army
* a few fixes here and there
* monster_dog is not getting stuck in leap state anymore

### 2025-04-19

* added back chase cam
* started cleaning up `MSG`, added read and write methods to `SzBuffer`
* started auditing `CL` in more detail, it’s time to refactor the code considering legacy game and QuakeJS features

### 2025-04-17

* fixed an absolutely dumb bug in my rewrite breaking spawning a local map after 10s
* location.search will now properly map to command line like this: `?noquakejs=true` --> `-noquakejs`
* added some `await Promise.all([…])` to speed up loading

### 2025-04-15

* continued working on usercmds and update messages
  * there’s still unnecessary update chatter every 16ms from the server side
  * client is only sending whenever there is an update and every 10 seconds
  * there’s logic missing killing off players that are no longer sending pings
* I need to look into reliable and unreliable messages, unsure if they are still needed over WebSocket

### 2025-04-13

* moved `PR` related stuff from `ED` to `PR`
* considering rewriting ClientEntity into ClientEdict and allow the game code to put entities on top of it, reflecting the server side structure
* some more `Cvar` improvements
  * implemented `Cvar.FLAG.CHEAT`
  * server is sending server cvars as serverinfo
* there’s still lots of chatter going on even though it’s not required
  * if there is no input update or anything, we do not need to send every frame

### 2025-04-12

* decided to ditch lerping entities for now, it’s in there, but disabled by default
* focussing on getting networking back on track as well as Client Game stuff
* merged `SZ` into `MSG`
* went over `Cmd`, `Cvar` and `Con` once more
  * added `Con.PrintWarning` to emit warnings
  * added `Con.PrintError` to emit errors
  * added `Cvar.FLAG.DEFERRED` (but not finished yet)
  * introduced `Cvar.FLAG.GAME`, cvars registered by the game code
* added code to render colored text
* started wiring up `ClientGameAPI` to `CL` code
* made `0.8` the default for `gamma`
* added parameter `-noquakejs` to disable loading of QuakeJS game code
* M: alert box supports newlines now
* added a safeguard making the client code check if server QuakeJS is compatible
* need to reimplement beam and other temporary entities

### 2025-04-11

* some cleanup
  * introduced proper `SzBuffer` class
  * cleaning more in `SV`, merging functions into new classes
* I’m considering completely rewriting Host, SV and CL

### 2025-04-08

* `Cvar.set` didn’t do anything lol, fixed

### 2025-04-07

* all entities are pushed via delta updates per client now

### 2025-04-05

* there are a couple of objects that only get their properties sometime during the running process, this leads to interesting situations (me getting confused all the time)
* trying to stick to a convention for `toString`: always name `this.constructor.name` first
* introduced `SV.Client` class
  * also got rid of a few C-style setters/getters
* introduced flag `Mod.effects.nodraw` to make entities hidden via `effects`
* started implementing usercmd delta packages
* small fix in `S.StopSound`
* introduced `SV.EntityState` class to track written delta package on a per player basis
* added `console.assert` to `MSG.Write*` to make sure things are not getting out of bound
  * found a couple of silent bugs that way
* added `SV.TraversePVS` making it easier to go over PVS
* seems like I’m half way through rewriting the netcode based on QW improvements
* next up:
  * getting the entities back in place using delta updates
  * proper delta updates on clientdata
  * pmove predicted client moves

### 2025-04-03

* added `Cvar.FLAG.SECRET` to suppress broadcasting sensitive cvar changes
* started reorganizing client/server code, decided to implement the QW protocol (more or less)
* started adding Pmove to the client code
* if you add some `console.assert` here and there, you’ll discover lots of fun quiet bugs
* started implementing delta updates and only transmitting PVS visible players etc.

### 2025-04-02

* more Pmove
  * added a mini testsuite `Pmove.TestServerside()`
  * `pmovetst.c` is ported
  * most of `pmove.c` is ported
* next steps:
  * replace the old move code in `SV` with the new `Pmove` logic

### 2025-04-01

* some more polish on Cvar.js
* I want to have client prediction, so I started porting over pmove.c from QuakeWorld
  * PM_RecursiveHullCheck is the same as SV_RecursiveHullCheck
    * works already on the new structure: `Pmove.Hull.fromDeprecated(Mod.known[0].hulls[1]).pointContents(SV.server.edicts[1].entity.origin)`
  * playermove_t is going to be implemented encapsulated
  * hull and plane (somewhere over in Mod) will be replaced by this later
  * introduced `Hull.fromDeprecated` because I’m going to clean up some old structures as well

### 2025-03-30

* went through a lot of maps and checked what’s going wrong, found a couple of bugs and fixed them
* a few Sys.Error to console.assert changes
* fixed the fact that dogs can trigger buttons
* load game from menu will use the json files now
* bunch of a lowhanging fruits todos
* fixed screenshot (F12)
* introduced arguments to console commands, removing the access to the `Cmd.argv` global allowing `AsyncFunction` in future
* introduced `Cvar` class with flags and some more fluff
* made console disappear instantly after joining the game

### 2025-03-28

* reorganized shaders

### 2025-03-27

* fixed the zombie player issue after a disconnect
* used a three hours plane ride to implement colored dlights

### 2025-03-20

* save/load
  * breaks in QuakeC, writing to entities of which the data structures are not existing yet/anymore
  * breaks in QuakeJS, when objects get serialized or nested more complicated structures
* added a magic serializer class
* more AI related work

### 2025-03-16

* continue working on monster_dog and AI stuff, I’m considering tossing the whole structure and to start all over again
* also considering pause AI for now and focus on network first, implementing more of the QW improvements
* added save/load back to the engine
  * serialize/deserialize added to the QuakeC VM
  * meanwhile over in QuakeJS world: TODO and not as straight forward except I’m going to use blackmagic
* need to have a configuration for QuakeJS/QuakeC, right now I’m commenting out/in a `throw Error`

### 2025-03-11

* started working on monster_dog and more AI stuff

### 2025-03-10

* added death bubbles and fixed the vanilla Quake’s actually air_bubbles bubble spawner logic, though it’s still ugly

### 2025-03-08

* all sorts of bugs happen if there is an entity at origin doing special things (vanilla BUG)
  * for instance, trigger_push at or near origin (0, 0, 0) affects projectiles and other things spawned in
  * also happens in vanilla Quake
  * the root cause is linkEdicts with triggerTouch = true when the model is being set and it brings sizes (causing the forced relink)
* added plenty of asserts to the Vector class, it’s too easy to confuse `setTo` and `set` causing NaNs when for instance trying to multiply Vector with a number

### 2025-03-07

* added back in the delayed unsetting and freeing of `entity`, sometimes we had strange side effects of logic assuming they could still access certain entity data even though the edict got freed already
* need to restructure ED.js and move logic to `SV.Edict`
* implemented `func_train` using VS Code Copilot, it went okayish
* introduced `BaseEntity.lazyRemove()` to gracefully remove an entity and keep it alive for at least 100ms and up to whatever is configured in `delay`
* found a nasty bug in `useTargets` causing some scripted sequences to be out of order when delays were used.
* quite happy about the current memory footprint, though it could be optimized further

### 2025-03-05

* triggers needs some clean up, cleaned up code related to doors
* added some `console.asserts` here and there
* also those centerPrint sound effects should play locally, right now they are sometimes play on entities
* started implementing func_plat
* absurdly hunt down a garbage collection issue, added some explicit resetting of variables and it turned out that it was the developer console holding references due to some `console.log(this)` statements

### 2025-03-02

* should always add netname to everything that inflicts damage, otherwise we will get gems such as “func_door killed player”
* intermission stuff

### 2025-02-26

* added couple more of trigger entities
* fixed a stupid bug deep down in linked doors caused by a faulty entities touching check
* I noticed that some entities set fields that do not exist or are valid on some entities --> might need to go more easy on setting fields
* doors with a lock will tell the player what key is needed again
* cleaning up some earlier code I wrote
* resolved a couple of TODOs
* I noticed a couple of stuttering when `aim` is called, lots of GC involvement too
* I need to fix that applyBackpack switch weapon after consuming backpack nonsense
* added all weapon entities
* jumping out of water works now, there was a bug over in the engine I introduced weeks ago
* completed reimplementation of powerups

### 2025-02-25

* added barrels
* some small adjustments in Subs

### 2025-02-24

* move some code around
* made sounds precache upon connect properly, getting away from my lazy load nonsense
* added health items and armor items, I think items should be complete by now
* time to implement all trigger_ next

### 2025-02-23

* found the root of discrepancies: equals check with Edicts (fed by the engine) instead of Entities
* added Lightning gun
* some more fixes around weapon states
* simplied some code here and there
* introduced `sv_cheats`
* added artifact items as well as sigils

### 2025-02-22

* there are some weird discrepancies between vanilla Quake and my Quake
* fixed some issues with those Nailgun spikes

### 2025-02-21

* there’s a glitch when depleting ammo that I need to investigate
* added the nailguns (I’m okayish happy how I implemented it)

### 2025-02-20

* thinking about removing some entity classes from the registry and have a “private” spawn by simply allocating the edict and instantiating the entity class ourselves
* first I thought, FindInRadius was not working, turns out `trace.fraction === 1.0` is *not* the way how to test if an expected entity has been traced, there must be some floating point voodoo making problems here? it’s always close to 1.0 (off by less than 0.3 off, which is quite big for floating point imprecisions though)
* implemented blastDamage, added Rocket Launcher, some smaller bug fixes
* decided to keep `BaseEntity.clear()`, restructured handling `respawn`/`putPlayerInServer`
* choosing best weapon after picking up a “backpack” is a bit flawed

### 2025-02-19

* some documentation clean up
* added blood particles, a primitive hitbox check, `bloodcolor` etc.
* implemented some more TODOs here and there
* bmodels own that fantastic trait of their origin being always at `Vector(0, 0, 0)`, you have to use `centerPoint`
* implemented shotguns and started working on `DamageInflictor` class
* couple of fixes for finding entities
* backpacks/items that cannot be consumed won’t disappear anymore
* 3s pause between being dead and being able to respawn
* I’m getting very close to have everything except the monsters/AI reimplemented

### 2025-02-17

* once I got QuakeJS finished, I might consider add V8 to WinQuake (or a proper modern port) to see if this new game code would work with proper Quake ports as well
  * providing the Engine Interface should be fairly trivial (mimicking SV.Edict and stuff)
  * that edict field access must point into structures that the JavaScript engine memory maps directly
* implemented some obituary logic (`PlayerEntity.thinkDie` does it now)
* added player’s pain, dying and dead states
* added suicide to player
* improved a couple of things that vanilla Quake did in a weird way
* reorganized connect/disconnect events for players

### 2025-02-16

* current plan is to port over player, weapons, items and func stuff first, then we can take care of the monsters and stuff
* added more player animation states, started adding weapon attacks
* introduced `DamageHandler`, `BaseEntity.damage` and a few more things to handle damage somewhat conveniently
* `PF_aim` is supposed to have an argument called speed, but it’s not implemented, not even by vanilla Quake
* added `direction` to `Edict.aim` as well as `BaseEntity`
* worked on some TODOs regarding inflicting damage

### 2025-02-15

* added teleporting stuff
* added EngineInterface for temporary entities

### 2025-02-13

* ported more over of items, keys and ammo
  * it’s super easy and convenient to extend items now
  * should look into making it more flexible on the client side as well (e.g. inventory)
* netradiant is so much better than GtkRadiant
* have to use Valve 220 map format, otherwise textures are all over the place
* looking into porting over hlbsp at some point
* I tried again hooking up CANNON, since now it’s easier to play around with objects and stuff, but no luck
* at some point I should look into JavaScript workers (maybe I could let the local server run in the background)
* I should focus on porting over the core mechanics of Quake so that we can get at least Deathmatch going again, AI and monsters later
* before I’m going to start implementing BSP2 or HLBSP (v30), I need to refactor loading of models

### 2025-02-12

* continue working on porting of items.qc
* added `item_backpack` entity
  * there’s infrastructure to let a player consume a backpack of arbitrary items and ammo: `PlayerEntity.applyBackpack`
* added `item_shells`, `item_rockets`
* thinking of simplifying the whole precache/model stuff

### 2025-02-09

* got GtkRadiant working, but textures are bugging out when the map is reloaded
* found ericwtools to compile maps
* thought I introduced a bug somewhere in func_wall, turned out, it was the missing spawnflags handling upon preparing entities

### 2025-02-05

* added ambient sound entities
* added wall entities
  * though removing them does not work for whatever reason, have to investigate

### 2025-02-04

* reimplemented secret doors, shooting at them still missing though

### 2025-02-03

* mini project idea: reimplement q2048 https://github.com/jhspetersson/q2048/tree/master
* added gibbing
  * gibbing turns an actor into a head and spawns three giblets
  * MOVETYPE_BOUNCE is a hack lol
* added `resetThinking`

### 2025-02-02

* it’s mildly frustrating that if you forget to copy a Vector you’ll get a reference causing all sorts of funny side effects, I need to doublecheck all `(origin|a?velocity|angles)\s*=`
* AI is making things walk now
* Added impulse code 66 to get information of the entity in front of you
* Introduced that scheduled thinker pattern to ease up lots of pain
  * _scheduleThink will schedule thinking according to timeline, optionally taking an identifier

### 2025-02-01

* over at the engine side of things, there’s too much QuakeC serving structures, I need to clean it up
* also I should move `Game.EngineInterface` to `PF` maybe for the time being
* reimplemented weapon switch back, but I also do not like the way I did it, I want some encapsuled weapon handling
* also I thought about `bf` console command as it being a hack and that we need a better way to push events to the client side
* random observations:
  * `SV.RunThink` will reset `nextthink` to 0
  * `ltime` is not `time`

### 2025-01-31

* there’s a super weird bug where models and entities detach from each other (observed from a dummy monster on a moving platform)
* I need a better thinker system and state machine, the original QuakeC one doesn’t cut it
  * I tried to come up with a custom `setTimeout` and async/wait thing, but that would break save/load games

### 2025-01-30

* spun-off `_sub*` methods into its own class to keep `BaseEntity` a bit more tidy
* I need more debugging tools from the engine side
  * such a bbox renderer for entities
* right now some APIs between game and engine are catering more to the QuakeC world, I want to clean that up once the new game code is ready and I like the structure
* some cleaning up eslint related stuff, should focus on more static analysis
* I found some weird glitches in platforms (the lift on E1M1 is glitching when you are on it going up, also getting stock pushes you to world origin for one frame and then you get unstuck again, both original game bugs)
* added debug_marker entity to help debugging things
* fixed a stupid bug in the use handler, invoked `angleVectors` on `origin` instead of `angles`
* `entity.ltime != game.time`
* we got this concept of `BaseEntity.isActor` now grouping players and NPCs
* started porting over code from QuakeC regarding AI
* I decoupled AI from entity, so in future it might be easier to have a more smart drop-in AI replacement

### 2025-01-27

* looks like the traceline is bugging out or the sizes are not set properly for things like doors, need some visual representation of their bounding boxes
* I’m not happy about how to spawn temporarity entities or entities that require another entity they make up on the fly
* added linking doors / door parts
* I’m also not happy about these sub_* contraptions, I’m thinking about adding a proper state machine
* `_precache` is called twice now: in `constructor` and in `assignInitialData`, because some fields will influence precache behavior --> doors work now

### 2025-01-26

* I found `+use`/`-use`, but it’s not fully implemented on the engine side, added it back in
* Introduced `Host.ScheduleInFuture` for convenient scheduling tasks in the near future
* Archive Cvars are getting persisted right away
* Accidentally spammed the sound subsystem by having issues with `watertype` and `waterlevel`
* View angels are considered for noclip moves now
* Reimplemented jump
* Started playing around with `use` and `touch`
* Started implementing doors

### 2025-01-25

* Still working on a few structural things in QuakeJS
* Entities need to have all fields declared
* Classnames are now static

### 2025-01-24

* ported more QuakeJS features over from QuakeC: weapon handling

### 2025-01-22

* stuffing QuakeC quirkses into ProgsEntity/EdictProxy
* calls into the game are now carrying entities first, not edicts
* I cannot get rid of private data of entities over in QuakeC world, it loves to write into freed edicts
* I want to rename `Edict.api` to `Edict.entity` to make clear this is the entity structure

### 2025-01-21

* it’s super important that models are set --> physics depend on them
* this whole edicts have to be there and then you need to split instantiating an entity is super ugly
* added a QC parser
  * the structure how I implemented it is not great, needs refactoring
  * it automatically groups frames into animations by name
* started adding a state machine to `BaseEntity`
  * there’s `_initStates` to init states
  * there’s `_defineState` to add states, similar to what QuakeC has
* introduced `GameAI` and `EntityAI` to separate logic a bit
  * GameAI will hold the global state
  * EntityAI will hold the entity state and provide functions

### 2025-01-20

* started reimplementing Quake game logic in QuakeJS
* changed a few interfaces around
* I’m again unhappy how I integrated QuakeC VM, it should follow the QuakeJS standard now

### 2025-01-19

* restructured spawning of entities
  * initiate the entity object
  * preset a couple of information (SV.SpawnServer or ED.LoadFromFile)
  * call the actual spawn function
* there’s no max edict limit anymore
* removed progsdef logic, I got no need for it anymore
* integrated webserver denies the browser caching when developer is set to 1
* temporary entities only have a life on client side
  * this could be refactored into the client code of QuakeJS
    * applies to Sbar as well

### 2025-01-18

* it’s now possible to mix QuakeJS and QuakeC world, albeit it’s super brittle and incomplete
  * QuakeJS can speak to QuakeC but not vice-versa
* started transforming things to `async`/`await`

### 2025-01-17

* moved lots of PF builtins to either `SV.Edict` or `Game.EngineInterface`
* started cleaning up some contraptions to bridge between progs and engine
  * removed `ClearEdictPrivateData`
  * also starting to move `v`, `v_int` and `v_float` completely private to `ProgsEntity`
  * renamed `EdictProxy` to `ProgsEntity`
  * removed `PR.GameInterface` (it was of no use anyway)
* I’m not happy how entangled clients and edicts are
* I need to introduce some feature flags the QuakeJS game can set:
  * interpolation yes/no
  * colored lightmaps yes/no
  * high precision protocol yes/no
* PR/PF: I need to add debug features or at least hide some of the asserts and safety checks behind `Host.developer.value`
* CL: loading maps is like 10x as fast now, found balance between updating the screen and loading/crunching data
* Host: changed behavior of `give`, it will now accept an entity classname and spawn it in front of the player

### 2025-01-16

* got rid of almost all `v_int`/`v_float`
* fixed a couple of issues that were introduced when I did some changes to the code during the past few weeks
  * damage information wasn’t properly sent to the client
  * some issues related to null entity vs worldspawn (I assumed edict 0 was null entity, but it’s also worldspawn)
  * sounds wouldn’t play sometimes
* we could actually get rid of precaching or at least the hard requirement of having all resources precached
* fixed one of the most stupid bugs in `Vector.clear()`: it would set the vector to `[0.0, 1.0, 2.0]` causing some fun
* SV<->CL: bumped up punchangle precision from 8 bit to 16 bit

### 2025-01-15

* introduced `Game.EngineInterface`
  * started to organize some of the API functions into a unified game API
* introduced `PF._generateBuiltinFunction`
  * you can pass a signature and it will automatically translate JavaScript native functions to QuakeC builtins
  * also comes with lots of sanity checks for the time being, I need to comment them out or at least make it toggleable
* introduced `PR._stats` to collect data on how many times what variable was read/written
* introduced `SV.Edict` class
* about to introduce `SV.Client` class
* there’s some weird entanglement between edicts and clients based on their ID
* NPCs and items are not affected by gravity, only clients with `SV.movetype.walk` are exposed to `SV.AddGravity`… bug?
* almost crunched all `v_int`/`v_float` access, but now I’m seeing all sorts of issues

Need to be more careful with those ent structures:
```
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:         const dz = ent.v_float[PR.entvars.origin2] - SV.server.edicts[enemy].v_float[PR.entvars.origin2];
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:                                                                              ^
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]: TypeError: Cannot read properties of undefined (reading 'v_float')
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.movestep (/srv/quakeshack-release/source/SV.js:940:78)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at Array.PF_walkmove (/srv/quakeshack-release/source/PF.js:460:28)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at PR.ExecuteProgram (/srv/quakeshack-release/source/PR.js:1219:26)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at FunctionProxy.call (/srv/quakeshack-release/source/PR.js:278:10)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at Object.apply (/srv/quakeshack-release/source/PR.js:261:20)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.RunThink (/srv/quakeshack-release/source/SV.js:1195:11)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.Physics_Step (/srv/quakeshack-release/source/SV.js:1741:6)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.Physics (/srv/quakeshack-release/source/SV.js:1959:12)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.SpawnServer (/srv/quakeshack-release/source/SV.js:859:6)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at /srv/quakeshack-release/source/Host.js:670:8
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]: Node.js v23.2.0
```

### 2025-01-14

* I might have found a way to group frames into animations:
  * going over functions that start off with `PR.op.state`,
  * extract this frame, think (next frame)
* fixes related to r_interpolation
  * applied to lightstyles as well
  * setting to 0 will apply to all interpolated values now

### 2025-01-13

* fixed co-op respawn bug

### 2025-01-10

* fixed player rendering bug
* adjusted Sbar code to have the player list and chatter box back in co-op mode
* found a new bug: dead players in co-op will lead to a reconnect for all

### 2025-01-09

* played around with smooth texture animations using pixel shaders

### 2025-01-07

* models with grouped frames do have linear interpolation now, done via the vertex shader for alias models
* added cvar `r_interpolation` to switch on/off interpolation of grouped frames
* added fade effect between animated textures, also controlable via `r_interpolation`

### 2025-01-06

* `SV.server.gameAPI.mapname` could be part of `SV.server` instead
* for some reason `SV.svs.maxclientslimit` is always forced to 1 when we are in full-stack mode, unsure if there was a reason behind that
* `Sbar` is basically everything that would be part of `cl_dll` in GoldSrc
* `SV.svs.clients[].name` must be an empty string, otherwise `Sbar` is going to bug out
* fixed a few `null` strings here in there due to some gameAPI vars I forgot to set

### 2025-01-05

* found some regenerated stuff, I added their generator algorithms next to them
* some more splitting off `PR` and `SV`
* should be more careful with replacing things willy-nilly, introduced a nasty bug that took me an hour to track down
* `PR.FunctionProxy` is now cached (using edict id and function id as key), improved memory and CPU usage drastically

### 2025-01-04

* more and more use of `edict.api`, server state is keeping track of the client names, not the game anymore
* unsure where the border is between `Host` and `SV`, there’s quite a lot of server related state inside of `Host`
* introduced `ed.clear()` to clear private data on edicts, more separation of PR private data access and rest of the engine

### 2025-01-03

* found QC files at https://www.doomworld.com/idgames/idstuff/unsup/progs106
* decompiling from `progs.dat` to JavaScript is getting more complicated due to branching
* introduced `SV.server.worldvars`
* also introduced proper function call proxy to execute PR functions
* ED/PR: seems like fielddefs are barely used (except save/load and parsing from Edict text)
* ED/PR: introduced `PR.SetString` able to recycle memory and update in place
* ED: parsing requires knowledge about the structure in order to set entvars, getting rid of PR reliance is hard

```
const player = SV.server.edicts.find((ent) => ent.vars.classname === 'player');
// calls make_bubbles from QuakeC VM, sets self to player
SV.server.worldvars.make_bubbles(player);
```

### 2025-01-02

* first experiments with CANNON.js, but I’m seeing weird issues (fall through issues)
* added code that generates a triangle mesh based on the BSP structure (being fed into CANNON.js)
* introduced first version of proxy classes to ease up interfacing data going in / coming out of QuakeVM
* added quaternion math to `Vec`
* ED, PF, PR: in order to have a function call proxy, you need to know the function signature ahead of time unfortunately, I need to move all the proxy stuff from ED to PR
* `Vec.Copy`’s order of arguments was a fucking trap to deal with

```
const global = new ED.Proxy(null);
const player = SV.server.edicts.find((ent) => ent.vars.classname === 'player');
// calls make_bubbles from QuakeC VM, sets self to player
global.make_bubbles.call(player);
```

### 2025-01-01

* added initial touchpad support using nipple.js, no longer a high prio, it’s a crap experience anyway
* added chatlog next to the ranking in multiplayer games
* BUG: ambient sounds are not stopped properly from time to time, no clue why
* changed the multiplayer menu a bit
* using AbortController to stop all pending network requests
* also added some `!this._started` safeguards to `S.LoadSound` and a few other places
* calling `S.LoadPendingFiles` to load all new files after connect
* `SV.svs.maxclientslimit = 32;`
* added `S.LoadPendingFiles`

### 2024-12-31

* lots of eslinting, detected some bugs (undefined vars etc.)
* skip forward or do not play sounds at all when they arrived too late via async loading
* implemented a loading screen
* rendering of the loading screen is blocked by blocking IO activities
* renderer is now utilizing requestAnimationFrame
* easing up the blocking during entering the game using `CL.processingServerInfoState`
* introduced Draw.BigChar etc.
* added `svc.loadsound` to tell the client to load sounds that were not precached
* added `Draw.CachePicDeferred` for loading things in the background, cut down initial loading times by 200%

### 2024-12-30

* completely rewrote the sound subsystem, it was a mess until now
* static sounds are lazy loaded
* most sounds are still being loaded after the game is already ready

### 2024-12-29

* more SV related fixes, don’t crash on full servers
* reworked frontend error handling, leave a proper error message, clean up WebGL context on a crash
* loading maps is taking too long, looking into streaming of data when used
* started adding `*Async` to COM

### 2024-12-28

* added express.js to serve files for the frontend part through the dedicated server
* reimplemented RCON
* restructured file structure a bit
* noticed the sound is a bit broken on Chrome, fixing AudioContext sound subsystem
* added alert box (`M.Alert`), so that errors can show a proper message box instead of the Console

### 2024-12-27

* starting rewriting low-level networking code
* added ping, introduced `svc.updatepings`
* improved `svc.disconnect`: added a reason string

### 2024-12-25

* started working on network driver based on Websockets

### 2024-12-24

* started working on `dedicated.js`
* introduced node.js replacements for COM and Sys

### 2024-12-23

* mainly code clean up, used ESLint
* cleaned out lots of `var`
